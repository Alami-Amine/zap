{{zap_header}}

#include <stdlib.h>

#include "sl_cli_config.h"
#include "sl_cli_command.h"
#include "sl_cli_arguments.h"
#include "sl_cli.h"
#include "debug_print.h"

#define ZCL_CLUSTER_SPECIFIC_COMMAND          BIT(0)
#define ZCL_FRAME_CONTROL_CLIENT_TO_SERVER    0
#define ZCL_IDENTIFY_CLUSTER_ID                                            0x0003
#define ZCL_ON_OFF_CLUSTER_ID                                              0x0006
#define ZCL_IDENTIFY_COMMAND_ID 0x00 // Ver.: always
#define ZCL_IDENTIFY_QUERY_COMMAND_ID 0x01 // Ver.: always
#define ZCL_OFF_COMMAND_ID 0x00 // Ver.: always
#define ZCL_ON_COMMAND_ID 0x01 // Ver.: always
#define ZCL_TOGGLE_COMMAND_ID 0x02 // Ver.: always

#ifdef __cplusplus
extern "C" {
#endif


// Provide function declarations
  {{#all_user_cluster_commands}}
      {{#if (template_option_with_code "cli" this.name)}}
        {{#template_options category="cli"}}
          {{#if (isEqual this.optionCode ../name)}}
void {{asCamelCased this.optionLabel}}Command(sl_cli_command_arg_t *arguments);
          {{/if}}
        {{/template_options}}
      {{/if}}
  {{/all_user_cluster_commands}}


// Command structs. Names are command names prefixed by cli_cmd_zcl_[cluster name]_cluster
{{#all_user_cluster_commands}}
      {{#if (template_option_with_code "cli" this.name)}}
        {{#template_options category="cli"}}
          {{#if (isEqual this.optionCode ../name)}}
static const sl_cli_command_info_t cli_cmd_zcl_{{cleanseLabel ../clusterName}}_{{../clusterSide}}_cluster_{{asUnderscoreLowercase ../name}} = \
  SL_CLI_COMMAND({{asCamelCased this.optionLabel}}Command,
          {{/if}}
        {{/template_options}}
              "{{trim_string description}}",
              {{#if (zcl_command_arguments_count this.id)}}
              {{#zcl_command_arguments}}"{{asSpacedLowercase label}}" SL_CLI_UNIT_SEPARATOR {{/zcl_command_arguments}},
              {{else}}
              "",
              {{/if}}
              {
                {{#zcl_command_arguments}}
                  SL_CLI_ARG_{{asUnderscoreUppercase type}},
                {{/zcl_command_arguments}}
                  SL_CLI_ARG_END,
              });

      {{/if}}
{{/all_user_cluster_commands}}


// Create group command tables and structs if cli_groups given
// in template. Group name is suffixed with [cluster name]_[cluster_side]_cluster_group_table for tables
// and group commands are cli_cmd_( group name )_group
// Create root command table
{{#all_user_clusters}}
    {{#if (user_cluster_command_count_with_cli)}}
static const sl_cli_command_entry_t zcl_{{cleanseLabel name}}_{{side}}_cluster_command_table[] = {
      {{#user_cluster_commands_all_endpoints}}
        {{#template_options category="cli"}}
          {{#if (isEqual this.optionCode ../name)}}
  { "{{asLastWord optionLabel}}", &cli_cmd_zcl_{{cleanseLabel ../../name}}_{{../../side}}_cluster_{{asUnderscoreLowercase ../name}}, false },
          {{/if}}
        {{/template_options}}
      {{/user_cluster_commands_all_endpoints}}
  { NULL, NULL, false },
};

    {{/if}}
{{/all_user_clusters}}

{{#all_user_clusters}}
  {{#if (user_cluster_command_count_with_cli)}}
static const sl_cli_command_info_t cli_cmd_{{cleanseLabel name}}_{{side}}_group = \
  SL_CLI_COMMAND_GROUP(zcl_{{cleanseLabel name}}_{{side}}_cluster_command_table, "ZCL {{cleanseLabel name}} {{side}} cluster commands");

  {{/if}}
{{/all_user_clusters}}

static const sl_cli_command_entry_t zcl_group_table[] = {
{{#all_user_clusters}}
  {{#if (user_cluster_command_count_with_cli)}}
  { "{{cleanseLabel name}}", &cli_cmd_{{cleanseLabel name}}_{{side}}_group, false },
  {{/if}}
{{/all_user_clusters}}
  { NULL, NULL, false },
};

sl_cli_command_info_t cli_cmd_zcl_group = \
  SL_CLI_COMMAND_GROUP(zcl_group_table, "ZCL commands");

// Create root command table
const sl_cli_command_entry_t sl_cli_zcl_command_table[] = {
  { "zcl", &cli_cmd_zcl_group, false },
  { NULL, NULL, false },
};


#ifdef __cplusplus
}
#endif