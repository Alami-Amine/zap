/***************************************************************************//**
 * @file  zap-cli.c
 * @brief Generated file for zcl cli using ZAP. Do not update file manually.
 *******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/

#include <stdlib.h>

#include "sl_cli_config.h"
#include "sl_cli_command.h"
#include "sl_cli.h"
#include "sl_zigbee_debug_print.h"
#include "zap-type.h"
#include "zap-id.h"
#include "sl_component_catalog.h"


#ifdef SL_CATALOG_ZIGBEE_ZCL_CLI_PRESENT

#define ZCL_CLUSTER_SPECIFIC_COMMAND          (1U << (0))
#define ZCL_FRAME_CONTROL_SERVER_TO_CLIENT    (1U << (3))
#define ZCL_FRAME_CONTROL_CLIENT_TO_SERVER    0
extern void sli_zigbee_zcl_simple_command(uint8_t frameControl,
                        uint16_t clusterId,
                        uint8_t commandId,
                        sl_cli_command_arg_t *arguments,
                        uint8_t *argumentTypes);

#ifdef __cplusplus
extern "C" {
#endif

// Global cli function declarations
extern void sli_zigbee_cli_zcl_global_direction_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_command_discovery_generated_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_command_discovery_received_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_expect_report_from_me_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_write_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_uwrite_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_nwrite_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_read_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_report_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_report_read_command(sl_cli_command_arg_t *arguments);
extern void sli_zigbee_cli_zcl_global_send_me_a_report_command(sl_cli_command_arg_t *arguments);

// Provide function declarations
  {{#all_cli_commands_for_user_enabled_clusters}}
      {{#template_options category="cli"}}
        {{#if (isEqual this.optionCode ../name)}}
void sli_zigbee_cli_zcl_{{cleanseLabel ../clusterName}}_{{cleanseLabel (asLastWord this.optionLabel)}}_command(sl_cli_command_arg_t *arguments);
        {{/if}}
      {{/template_options}}
  {{/all_cli_commands_for_user_enabled_clusters}}

// Global Command structs. Names are command names prefixed by cli_cmd_zcl_[cluster name]_cluster
static const sl_cli_command_info_t cli_cmd_zcl_global_direction_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_direction_command,
                 "Sets the direction for global commands, either client to server or server to client.",
                 "direction" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_command_discovery_generated_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_command_discovery_generated_command,
                 "Create a Discover Commands Generated command with associated values.",
                 "clusterId" SL_CLI_UNIT_SEPARATOR "startCommandId" SL_CLI_UNIT_SEPARATOR "maxCommandId" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_command_discovery_received_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_command_discovery_received_command,
                 "Create a Discover Commands Generated command with associated values.",
                 "clusterId" SL_CLI_UNIT_SEPARATOR "startCommandId" SL_CLI_UNIT_SEPARATOR "maxCommandId" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_expect_report_from_me_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_expect_report_from_me_command,
                 "Create a expect-report-from-me message with associated values.",
                 "cluster" SL_CLI_UNIT_SEPARATOR "attributeId" SL_CLI_UNIT_SEPARATOR "timeout" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_write_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_write_command,
                 "Creates a global write command message to write to the cluster and attribute specified",
                 "cluster" SL_CLI_UNIT_SEPARATOR "attributeId" SL_CLI_UNIT_SEPARATOR "type" SL_CLI_UNIT_SEPARATOR "data" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT32,
  SL_CLI_ARG_STRING,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_uwrite_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_uwrite_command,
                 "Creates a global write command message to write to the cluster and attribute specified",
                 "cluster" SL_CLI_UNIT_SEPARATOR "attributeId" SL_CLI_UNIT_SEPARATOR "type" SL_CLI_UNIT_SEPARATOR "data" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT32,
  SL_CLI_ARG_STRING,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_nwrite_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_nwrite_command,
                 "Creates a global write command message to write to the cluster and attribute specified",
                 "cluster" SL_CLI_UNIT_SEPARATOR "attributeId" SL_CLI_UNIT_SEPARATOR "type" SL_CLI_UNIT_SEPARATOR "data" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT32,
  SL_CLI_ARG_STRING,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_read_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_read_command,
                 "Creates a global read command message to read from the cluster and attribute specified.",
                 "cluster" SL_CLI_UNIT_SEPARATOR "attributeId" SL_CLI_UNIT_SEPARATOR ,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_report_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_report_command,
                 "Global reporting command",
                 "endpoint" SL_CLI_UNIT_SEPARATOR "clusterId" SL_CLI_UNIT_SEPARATOR "attributeId" SL_CLI_UNIT_SEPARATOR "mask" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_report_read_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_report_read_command,
                 "Creates a global read reporting command for the associated cluster, attribute and server/client direction.",
                 "cluster" SL_CLI_UNIT_SEPARATOR "attributeId" SL_CLI_UNIT_SEPARATOR "direction" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_END,
});

static const sl_cli_command_info_t cli_cmd_zcl_global_send_me_a_report_command = \
  SL_CLI_COMMAND(sli_zigbee_cli_zcl_global_send_me_a_report_command,
                 "Creates a global send me a report command for the associated values.",
                 "cluster" SL_CLI_UNIT_SEPARATOR "attributeId" SL_CLI_UNIT_SEPARATOR "dataType" SL_CLI_UNIT_SEPARATOR "minReportTime" SL_CLI_UNIT_SEPARATOR "maxReportTime" SL_CLI_UNIT_SEPARATOR "reportableChange" SL_CLI_UNIT_SEPARATOR,
{
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT8,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_UINT16,
  SL_CLI_ARG_STRING,
  SL_CLI_ARG_END,
});

// Command structs. Names are command names prefixed by cli_cmd_zcl_[cluster name]_cluster
{{#all_cli_commands_for_user_enabled_clusters}}
      {{#template_options category="cli"}}
        {{#if (isEqual this.optionCode ../name)}}
static const sl_cli_command_info_t cli_cmd_zcl_{{cleanseLabel ../clusterName}}_cluster_{{asUnderscoreLowercase ../name}} = \
SL_CLI_COMMAND(sli_zigbee_cli_zcl_{{cleanseLabel ../clusterName}}_{{cleanseLabel (asLastWord this.optionLabel)}}_command,
        {{/if}}
      {{/template_options}}
            "{{trim_string description}}",
            {{#zcl_command_arguments}}"{{asSpacedLowercase label}}" SL_CLI_UNIT_SEPARATOR {{#last}},{{/last}}{{/zcl_command_arguments}}
            {{~if_command_arguments_exist id "" "\"\","}}
            {
              {{#zcl_command_arguments}}
                {{zcl_command_argument_type_to_cli_data_type type struct="SL_CLI_ARG_HEX"}},
              {{/zcl_command_arguments}}
                SL_CLI_ARG_END,
            });

{{/all_cli_commands_for_user_enabled_clusters}}

// Global command table
static const sl_cli_command_entry_t zcl_global_command_table[] = {
  { "direction", &cli_cmd_zcl_global_direction_command, false },
  { "disc-com-gen", &cli_cmd_zcl_global_command_discovery_generated_command, false },
  { "disc-com-rec", &cli_cmd_zcl_global_command_discovery_received_command, false },
  { "expect-report-from-me", &cli_cmd_zcl_global_expect_report_from_me_command, false },
  { "write", &cli_cmd_zcl_global_write_command, false },
  { "uwrite", &cli_cmd_zcl_global_uwrite_command, false },
  { "nwrite", &cli_cmd_zcl_global_nwrite_command, false },
  { "read", &cli_cmd_zcl_global_read_command, false },
  { "report", &cli_cmd_zcl_global_report_command, false },
  { "report-read", &cli_cmd_zcl_global_report_read_command, false },
  { "send-me-a-report", &cli_cmd_zcl_global_send_me_a_report_command, false },
  { NULL, NULL, false },
};

// Create group command tables and structs if cli_groups given
// in template. Group name is suffixed with [cluster name]_[cluster_side]_cluster_group_table for tables
// and group commands are cli_cmd_( group name )_group
{{#all_user_clusters_irrespective_of_side}}
  {{#user_cluster_commands_with_cli}}
  {{#first}}
static const sl_cli_command_entry_t zcl_{{cleanseLabel ../name}}_cluster_command_table[] = {
  {{/first}}    
          {{#template_options category="cli"}}
            {{#if (isEqual this.optionCode ../name)}}
    { "{{asLastWord optionLabel}}", &cli_cmd_zcl_{{cleanseLabel ../../name}}_cluster_{{asUnderscoreLowercase ../name}}, false },
            {{/if}}
          {{/template_options}}
  {{#last}}
  { NULL, NULL, false },
};
  {{/last}}
  {{/user_cluster_commands_with_cli}}
{{/all_user_clusters_irrespective_of_side}}

// Global ZCL commands
static const sl_cli_command_info_t cli_cmd_zcl_global_group = \
  SL_CLI_COMMAND_GROUP(zcl_global_command_table, "ZCL global cluster commands");

// ZCL cluster commands
{{#all_user_clusters_irrespective_of_side}}
  {{#user_cluster_commands_with_cli}}
  {{#first}}
static const sl_cli_command_info_t cli_cmd_{{cleanseLabel ../name}}_group = \
  SL_CLI_COMMAND_GROUP(zcl_{{cleanseLabel ../name}}_cluster_command_table, "ZCL {{cleanseLabel ../name}} cluster commands");
  {{/first}}
  {{/user_cluster_commands_with_cli}}
{{/all_user_clusters_irrespective_of_side}}

static const sl_cli_command_entry_t zcl_group_table[] = {
{{#all_user_clusters_irrespective_of_side}}
  {{#user_cluster_commands_with_cli}}
  {{#first}}
  { "{{cleanseLabelAsKebabCase ../name}}", &cli_cmd_{{cleanseLabel ../name}}_group, false },
  {{/first}}
  {{/user_cluster_commands_with_cli}}
{{/all_user_clusters_irrespective_of_side}}
  { "global", &cli_cmd_zcl_global_group, false },
  { NULL, NULL, false },
};

sl_cli_command_info_t cli_cmd_zcl_group = \
  SL_CLI_COMMAND_GROUP(zcl_group_table, "ZCL commands");

// Create root command table
const sl_cli_command_entry_t sl_cli_zcl_command_table[] = {
  { "zcl", &cli_cmd_zcl_group, false },
  { NULL, NULL, false },
};

sl_cli_command_group_t sl_cli_zcl_command_group =
{
  { NULL },
  false,
  sl_cli_zcl_command_table
};


{{#all_cli_commands_for_user_enabled_clusters}}
      {{#template_options category="cli"}}
        {{#if (isEqual this.optionCode ../name)}}
void sli_zigbee_cli_zcl_{{cleanseLabel ../clusterName}}_{{cleanseLabel (asLastWord this.optionLabel)}}_command(sl_cli_command_arg_t *arguments) {
        {{/if}}
      {{/template_options}}
uint8_t argumentTypes[{{addOne (zcl_command_arguments_count this.id)}}] =  { {{#zcl_command_arguments}}
                 {{zcl_command_argument_type_to_cli_data_type type struct="SL_CLI_ARG_HEX"}},
                          {{/zcl_command_arguments}} };
sli_zigbee_zcl_simple_command(ZCL_CLUSTER_SPECIFIC_COMMAND | {{#if (isClient commandSource)}}ZCL_FRAME_CONTROL_CLIENT_TO_SERVER{{else}}ZCL_FRAME_CONTROL_SERVER_TO_CLIENT{{/if}},  \
                 ZCL_{{asUnderscoreUppercase clusterName}}_CLUSTER_ID,                                                       \
                 {{code}},
                 arguments,
                 argumentTypes);
}

{{/all_cli_commands_for_user_enabled_clusters}}
#ifdef __cplusplus
}
#endif
#endif