{{chip_header}}
{{silabs_header}}


#include <stdint.h>

#include "af-structs.h"
#include "call-command-handler.h"
#include "callback.h"
#include "command-id.h"
#include "util.h"

{{#all_user_clusters}}
EmberAfStatus emberAf{{define}}{{asCamelCased side false}}CommandParse(EmberAfClusterCommand * cmd);
{{/all_user_clusters}}


static EmberAfStatus status(bool wasHandled, bool clusterExists, bool mfgSpecific)
{
    if (wasHandled)
    {
        return EMBER_ZCL_STATUS_SUCCESS;
    }
    else if (mfgSpecific)
    {
        return EMBER_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND;
    }
    else if (clusterExists)
    {
        return EMBER_ZCL_STATUS_UNSUP_COMMAND;
    }
    else
    {
        return EMBER_ZCL_STATUS_UNSUPPORTED_CLUSTER;
    }
}


// Main command parsing controller.
EmberAfStatus emberAfClusterSpecificCommandParse(EmberAfClusterCommand * cmd)
{
    EmberAfStatus result = status(false, false, cmd->mfgSpecific);
    if (cmd->direction == (uint8_t) ZCL_DIRECTION_SERVER_TO_CLIENT &&
        emberAfContainsClientWithMfgCode(cmd->apsFrame->destinationEndpoint, cmd->apsFrame->clusterId, cmd->mfgCode))
    {
        switch (cmd->apsFrame->clusterId)
        {
        {{#all_user_clusters}}
        {{#if (isClient side) }}
        case ZCL_{{asDelimitedMacro define}}_CLUSTER_ID :
            result = emberAf{{define}}{{asCamelCased side false}}CommandParse(cmd);
            break;
        {{/if}}
        {{/all_user_clusters}}
        default:
            // Unrecognized cluster ID, error status will apply.
            break;
        }
    }
    else if (cmd->direction == (uint8_t) ZCL_DIRECTION_CLIENT_TO_SERVER &&
             emberAfContainsServerWithMfgCode(cmd->apsFrame->destinationEndpoint, cmd->apsFrame->clusterId, cmd->mfgCode))
    {
        switch (cmd->apsFrame->clusterId)
        {
        {{#all_user_clusters}}
        {{#unless (isClient  side) }}
        case ZCL_{{asDelimitedMacro define}}_CLUSTER_ID :
            result = emberAf{{define}}{{asCamelCased side false}}CommandParse(cmd);
            break;
        {{/unless}}
        {{/all_user_clusters}}

        default:
            // Unrecognized cluster ID, error status will apply.
            break;
        }
    }
    return result;
}

// Cluster specific command parsing

{{#all_user_clusters}}
EmberAfStatus emberAf{{define}}{{asCamelCased side false}}CommandParse(EmberAfClusterCommand * cmd)
{
    bool wasHandled = false;
    if (!cmd->mfgSpecific)
    {
        switch (cmd->commandId)
        {

        {{#all_user_cluster_commands}}
        {{#if (isStrEqual clusterSide parent.side)}}
        {{#if (isStrEqual clusterName parent.name)}}
        case ZCL_{{asDelimitedMacro name}}_COMMAND_ID: {
            // Command is fixed length: 0
            wasHandled = emberAf{{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}Callback();
            break;
        }
        {{/if}}
        {{/if}}
        {{/all_user_cluster_commands}}
        default: {
            // Unrecognized command ID, error status will apply.
            break;
        }
        }
    }
    return status(wasHandled, true, cmd->mfgSpecific);
}

{{/all_user_clusters}}