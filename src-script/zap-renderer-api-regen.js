#!/usr/bin/env node
/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

const Handlebars = require('handlebars')
const scriptUtil = require('./script-util.js')
const genTemplate = '../test/gen-template/zigbee/gen-templates.json'
const fs = require('fs')
const fsp = fs.promises
const path = require('path')
const scriptName = path.basename(__filename)

const license = `/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// This file is generated by "${scriptName}".
// Please don't edit manually.
`

// Generating rend_api.js content
function generateTemplate(
  rendererApiInfo,
  outputFile = '../src-shared/rend-api.js'
) {
  const template = Handlebars.compile(`exports.{{key}} = {{{value}}}\n`)
  let output = [license]

  output.push(
    template({
      key: 'renderer_api_info',
      value: JSON.stringify(
        rendererApiInfo['id'].map((x) => {
          return { id: x.id, description: x.description }
        })
      ),
    })
  )

  for (const key in rendererApiInfo) {
    if ({}.hasOwnProperty.call(rendererApiInfo, key)) {
      let entries = rendererApiInfo[key]
      let data = {}

      if (Array.isArray(entries)) {
        entries.sort((a, b) => ('' + a.id).localeCompare(b.id))
        entries.forEach((entry) => {
          data[entry.id] = entry.value ? entry.value : entry.id
        })
      } else {
        data = entries
      }
      output.push(template({ key, value: JSON.stringify(data) }))
    }
  }

  fsp.writeFile(outputFile, output.join('\n'))
  console.log(`Generating renderer api ids: ${path.resolve(outputFile)}`)

  // format file
  scriptUtil.executeCmd(null, 'npx', ['pretty-quick'])
}

async function generate() {
  let genData = await fsp.readFile(genTemplate, 'utf8')
  let genDataJson = JSON.parse(genData)
  let rendererApi = path.resolve(
    path.dirname(genTemplate),
    genDataJson.options.rendererApiInfo
  )
  let rendererApiData = await fsp.readFile(rendererApi, 'utf8')
  //   console.log(rendererApiData)
  generateTemplate(JSON.parse(rendererApiData))
}

generate()
